swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /task/:
    get:
      tags:
      - task
      description: get task by taskId
      operationId: TaskController.GetAllTask
      parameters:
      - in: header
        name: openid
        description: user's id from wx
        required: true
        type: string
      responses:
        "200":
          description: '{[object]} models.Task'
        "403":
          description: :taskid is empty
    post:
      tags:
      - task
      description: specific user create tasks
      operationId: TaskController.CreateTask
      parameters:
      - in: body
        name: body
        description: body for task content
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      responses:
        "200":
          description: '{map[string]string}'
        "403":
          description: body is empty
  /task/{taskid}:
    get:
      tags:
      - task
      description: get task by taskId
      operationId: TaskController.GetTask
      parameters:
      - in: path
        name: taskid
        description: the key
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Task'
        "403":
          description: :taskid is empty
    put:
      tags:
      - task
      description: update the task
      operationId: TaskController.UpdateTask
      parameters:
      - in: path
        name: taskid
        description: The taskId you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for task content
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Task'
        "403":
          description: :taskid is not int
    delete:
      tags:
      - task
      description: delete the task
      operationId: TaskController.DeleteTask
      parameters:
      - in: path
        name: taskid
        description: The taskid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: taskid is empty
  /task/accept/{taskid}:
    put:
      tags:
      - task
      description: user accept the task
      operationId: TaskController.AcceptTask
      parameters:
      - in: path
        name: taskid
        description: The taskid you want to accept
        required: true
        type: string
      responses:
        "200":
          description: '{string} accept success!'
        "403":
          description: taskid is empty
  /task/settleup/{taskid}:
    put:
      tags:
      - task
      description: user finish the task
      operationId: TaskController.SettleUpTask
      parameters:
      - in: path
        name: taskid
        description: The taskid you want to accept
        required: true
        type: string
      responses:
        "200":
          description: '{string} finish task success!'
        "403":
          description: taskid is empty
  /user/:
    get:
      tags:
      - user
      description: get user by openid(in session)
      operationId: UserController.GetUser
      parameters:
      - in: header
        name: openid
        description: user's id from wx
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is empty
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: '{int} models.User.Id'
        "403":
          description: body is empty
  /user/{uid}:
    put:
      tags:
      - user
      description: update the user
      operationId: UserController.UpdateUser
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is not int
    delete:
      tags:
      - user
      description: delete the user
      operationId: UserController.DeleteUser
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: uid is empty
  /user/login:
    get:
      tags:
      - user
      description: Logs user into the system
      operationId: UserController.Login
      parameters:
      - in: query
        name: code
        description: the code from wx.login()
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /user/logout:
    get:
      tags:
      - user
      description: Logs out current logged in user session
      operationId: UserController.logout
      responses:
        "200":
          description: '{string} logout success'
  /user/query:
    get:
      tags:
      - user
      description: Use session to get user's id
      operationId: UserController.login
      parameters:
      - in: query
        name: code
        description: wx.Login response code
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
definitions:
  models.AcceptRelation:
    title: AcceptRelation
    type: object
    properties:
      AcceptDate:
        type: string
      Id:
        type: integer
        format: int64
      Task:
        $ref: '#/definitions/models.Task'
      User:
        $ref: '#/definitions/models.User'
  models.ReleaseRelation:
    title: ReleaseRelation
    type: object
    properties:
      Id:
        type: integer
        format: int64
      ReleaseDate:
        type: string
      Task:
        $ref: '#/definitions/models.Task'
      User:
        $ref: '#/definitions/models.User'
  models.Task:
    title: Task
    type: object
    properties:
      acceptRelation:
        type: array
        items:
          $ref: '#/definitions/models.AcceptRelation'
      deadline:
        type: string
      description:
        type: string
      hasAccept:
        type: integer
        format: int32
      label:
        type: string
      maxAccept:
        type: integer
        format: int32
      priority:
        type: integer
        format: int32
      releaseRelation:
        type: array
        items:
          $ref: '#/definitions/models.ReleaseRelation'
      reward:
        type: number
        format: float
      state:
        $ref: '#/definitions/models.TaskState'
      tid:
        type: integer
        format: int64
      type:
        type: string
      userid:
        type: integer
        format: int64
  models.TaskState:
    title: TaskState
    format: int32
    type: integer
    enum:
    - Task_Open = 0
    - Task_Close = 1
    - Task_Done = 2
    - Task_Delete = 3
    example: 0
  models.User:
    title: User
    type: object
    properties:
      AcceptRelation:
        type: array
        items:
          $ref: '#/definitions/models.AcceptRelation'
      ReleaseRelation:
        type: array
        items:
          $ref: '#/definitions/models.ReleaseRelation'
      balance:
        type: integer
        format: int64
      id:
        type: integer
        format: int64
      openid:
        type: string
      username:
        type: string
tags:
- name: user
  description: |
    Operations about Users
