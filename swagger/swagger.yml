swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /task/:
    get:
      tags:
      - task
      description: get task by taskId
      operationId: TaskController.查询已发布任务列表
      parameters:
      - in: header
        name: session
        description: user's session ,get from login
        required: true
        type: string
      - in: query
        name: page
        description: page value,default is 1
        required: true
        type: integer
      - in: query
        name: keyword
        description: search by labels
        type: string
      responses:
        "200":
          description: '{[object]} models.Task'
        "403":
          description: :taskId is empty
    post:
      tags:
      - task
      description: 用户发送发布任务的请求
      operationId: TaskController.发布任务
      parameters:
      - in: header
        name: session
        description: user's session ,get from login
        required: true
        type: string
      - in: body
        name: body
        description: body for task content
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.CreateTaskReturnCode'
        "403":
          description: body is empty
  /task/{taskId}:
    get:
      tags:
      - task
      description: get task by taskId
      operationId: TaskController.查询指定id的任务
      parameters:
      - in: path
        name: taskId
        description: the key
        required: true
        type: integer
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Task'
        "403":
          description: :taskId is empty
    put:
      tags:
      - task
      description: 发布者任务被接取前可以随时修改任务信息，但是在任务被接受后则不能有任何改动
      operationId: TaskController.修改任务信息
      parameters:
      - in: header
        name: session
        description: user's session ,get from login
        required: true
        type: string
      - in: path
        name: taskId
        description: The taskId you want to update
        required: true
        type: integer
      - in: body
        name: body
        description: body for task content
        required: true
        schema:
          $ref: '#/definitions/models.Task'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.HttpResponseCode'
        "403":
          description: :taskId is not int
    delete:
      tags:
      - task
      description: 考虑到已经发布的任务可能存在因为其他不可抗逆因素而需要取消的情况，任务允许删除。条件是该任务未被接受或者被接受时间不超过十分钟
      operationId: TaskController.删除任务
      parameters:
      - in: header
        name: session
        description: user's session ,get from login
        required: true
        type: string
      - in: path
        name: taskId
        description: The taskId you want to delete
        required: true
        type: integer
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.HttpResponseCode'
        "403":
          description: taskId is empty
  /task/acceptance:
    get:
      tags:
      - task
      description: get task by taskId
      operationId: TaskController.查询自己已接受任务列表
      parameters:
      - in: header
        name: session
        description: user's session ,get from login
        required: true
        type: string
      - in: query
        name: page
        description: page value,default is 1
        required: true
        type: integer
      responses:
        "200":
          description: '{[object]} models.Task'
        "403":
          description: :taskId is empty
  /task/confirm/{taskId}:
    get:
      tags:
      - task
      description: 任务接受者将任务完成信息上传到服务器上，发布者查看所有接受者的信息以及其上传的任务完成信息
      operationId: TaskController.发布者查询任务完成信息
      parameters:
      - in: header
        name: session
        description: user's session ,get from login
        required: true
        type: string
      - in: path
        name: taskId
        description: 任务id
        required: true
        type: integer
      responses:
        "200":
          description: '{[object]} controllers.Task'
        "403":
          description: '{object} controllers.HttpResponseCode'
    post:
      tags:
      - task
      operationId: TaskController.发布者结算任务
      parameters:
      - in: header
        name: session
        description: user's session ,get from login
        required: true
        type: string
      - in: path
        name: taskId
        description: 任务id
        required: true
        type: integer
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.HttpResponseCode'
        "403":
          description: '{object} controllers.HttpResponseCode'
  /task/release:
    get:
      tags:
      - task
      description: get task by taskId
      operationId: TaskController.查询自己发布任务列表
      parameters:
      - in: header
        name: session
        description: user's session ,get from login
        required: true
        type: string
      - in: query
        name: page
        description: page value,default is 1
        required: true
        type: integer
      responses:
        "200":
          description: '{[object]} models.Task'
        "403":
          description: :taskId is empty
  /task/settleup/{taskId}:
    get:
      tags:
      - task
      description: 接受者完成任务的信息以及证明只有发布者和接受者自身才能看见
      operationId: TaskController.接受者查询自己已完成任务的信息
      parameters:
      - in: header
        name: session
        description: user's session ,get from login
        required: true
        type: string
      - in: path
        name: taskId
        description: 任务id
        required: true
        type: integer
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.HttpResponseCode'
        "403":
          description: '{object} controllers.HttpResponseCode'
    post:
      tags:
      - task
      operationId: TaskController.任务接受者结算任务
      parameters:
      - in: header
        name: session
        description: user's session ,get from login
        required: true
        type: string
      - in: path
        name: taskId
        description: 任务id
        required: true
        type: integer
      - in: body
        name: graph
        description: 图片，使用myfile:xxx传输
        required: true
        schema:
          $ref: '#/definitions/binary'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.HttpResponseCode'
        "403":
          description: '{object} controllers.HttpResponseCode'
  /task/task/accept/{taskId}:
    post:
      tags:
      - task
      description: user accept the task
      operationId: TaskController.接受任务
      parameters:
      - in: header
        name: session
        description: user's session ,get from login
        required: true
        type: string
      - in: path
        name: taskId
        description: 任务id
        required: true
        type: integer
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.HttpResponseCode'
        "403":
          description: '{object} controllers.HttpResponseCode'
  /user/:
    get:
      tags:
      - user
      description: get user by openid(in session)
      operationId: UserController.查询用户信息
      parameters:
      - in: header
        name: session
        description: user's session ,get from login
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is empty
  /user/{uid}:
    put:
      tags:
      - user
      description: update the user
      operationId: UserController.修改用户个人信息
      parameters:
      - in: header
        name: session
        description: user's session ,get from login
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/controllers.HttpResponseCode'
        "403":
          description: :uid is not int
  /user/download:
    get:
      tags:
      - user
      description: Use session to get user's id
      operationId: UserController.login
      parameters:
      - in: query
        name: code
        description: wx.Login response code
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /user/login:
    get:
      tags:
      - user
      description: Logs user into the system
      operationId: UserController.Login
      parameters:
      - in: query
        name: code
        description: the code from wx.login()
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /user/query:
    get:
      tags:
      - user
      description: Use session to get user's id
      operationId: UserController.login
      parameters:
      - in: query
        name: code
        description: wx.Login response code
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /user/queryImage:
    post:
      tags:
      - user
      description: Use session to get user's id
      operationId: UserController.login
      parameters:
      - in: query
        name: code
        description: wx.Login response code
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
definitions:
  binary:
    title: binary
    type: object
  controllers.CreateTaskReturnCode:
    title: CreateTaskReturnCode
    type: object
    properties:
      message:
        type: string
      success:
        type: boolean
      taskId:
        type: integer
        format: int64
  controllers.HttpResponseCode:
    title: HttpResponseCode
    type: object
    properties:
      message:
        type: string
      success:
        type: boolean
  models.AcceptRelation:
    title: AcceptRelation
    type: object
    properties:
      AcTaskState:
        $ref: '#/definitions/models.TaskState'
      AcceptDate:
        type: string
      ConfirmImages:
        type: array
        items:
          $ref: '#/definitions/models.ConfirmImage'
      Id:
        type: integer
        format: int64
      Task:
        $ref: '#/definitions/models.Task'
      User:
        $ref: '#/definitions/models.User'
  models.ConfirmImage:
    title: ConfirmImage
    type: object
    properties:
      AcceptRelation:
        $ref: '#/definitions/models.AcceptRelation'
      Id:
        type: integer
        format: int64
      ImagePath:
        type: string
  models.ReleaseRelation:
    title: ReleaseRelation
    type: object
    properties:
      Id:
        type: integer
        format: int64
      RelTaskState:
        $ref: '#/definitions/models.TaskState'
      ReleaseDate:
        type: string
      Task:
        $ref: '#/definitions/models.Task'
      User:
        $ref: '#/definitions/models.User'
  models.Task:
    title: Task
    type: object
    properties:
      acceptRelation:
        type: array
        items:
          $ref: '#/definitions/models.AcceptRelation'
      deadline:
        type: string
      description:
        type: string
      hasAccept:
        type: integer
        format: int32
      label:
        type: string
      maxAccept:
        type: integer
        format: int32
      priority:
        type: integer
        format: int32
      releaseRelation:
        type: array
        items:
          $ref: '#/definitions/models.ReleaseRelation'
      reward:
        type: number
        format: float
      tid:
        type: integer
        format: int64
      type:
        type: string
      userid:
        type: integer
        format: int64
  models.TaskState:
    title: TaskState
    type: string
    enum:
    - Task_ac_pend = "ac_pending"
    - Task_ac_do = "ac_doing"
    - Task_ac_check = "ac_checking"
    - Task_ac_other = "ac_other"
    - Task_rel_pend = "rel_pending"
    - Task_rel_do = "rel_doing"
    - Task_rel_finish = "rel_finishing"
    example: ac_pending
  models.User:
    title: User
    type: object
    properties:
      AcceptRelation:
        type: array
        items:
          $ref: '#/definitions/models.AcceptRelation'
      Image:
        type: string
      ReleaseRelation:
        type: array
        items:
          $ref: '#/definitions/models.ReleaseRelation'
      balance:
        type: integer
        format: int64
      id:
        type: integer
        format: int64
      openid:
        type: string
      username:
        type: string
tags:
- name: user
  description: |
    Operations about Users
